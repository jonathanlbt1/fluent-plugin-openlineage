# frozen_string_literal: true

require "thermite/tasks"
require_relative "../lib/tasks/thermite_dir_patch"

project_dir = File.dirname(File.dirname(__FILE__))
thermite    = Thermite::Tasks.new(cargo_project_path: project_dir,
                                  ruby_project_path: project_dir,
                                  optional_rust_extension: true)

namespace :thermite do # rubocop:disable Metrics/BlockLength
  desc "Clean up default binaries"
  task :clean_binnaries do
    puts "Cleaning up"
    Dir["#{thermite.config.ruby_extension_path}.*.default"].each do |file|
      FileUtils.rm(file)
    end
  end

  desc "Try to build extension if cargo is available or setup default lib"
  task :build_or_default do
    platform = "#{Gem::Platform.local.cpu}-#{Gem::Platform.local.os}"
    default_ext_path = "#{thermite.config.ruby_extension_path}.#{platform}.default"

    if thermite.cargo
      profile = ENV.fetch("CARGO_PROFILE", "release")
      thermite.run_cargo_rustc(profile)

      FileUtils.cp(thermite.config.cargo_target_path(profile, thermite.config.cargo_shared_library),
                   thermite.config.ruby_extension_path)
    elsif File.exist?(default_ext_path)
      puts "NOTE: Defaults to pre-build binary #{default_ext_path.inspect} => your mileage may vary."

      FileUtils.mv(default_ext_path,
                   thermite.config.ruby_extension_path)

      thermite.inform_user_about_cargo
    else
      # Prebuild binary is not available for a given platform, install cargo to
      # compile the gem
      raise thermite.cargo_required_msg
    end
  end

  desc "Cleanup cargo artifacts"
  task :cargo_clean do
    thermite.run_cargo_if_exists "clean", *thermite.cargo_manifest_path_args
  end
end

task default: %w[thermite:build_or_default thermite:cargo_clean thermite:clean_binnaries]
